{"version":3,"sources":["webpack:///./src/components/useTags.js","webpack:///./src/components/useAuthors.js","webpack:///./src/components/authors.js","webpack:///./src/components/tags.js","webpack:///./src/templates/list.js"],"names":["useTags","useStaticQuery","settingsJson","tags","useAuthors","authors","ListAuthors","authorIDs","filter","author","find","id","map","index","length","name","AuthorsForm","label","fields","component","itemProps","item","key","defaultItem","Math","random","toString","substr","email","link","parse","value","ListTags","tagIDs","tag","slug","ConvertTagTextToSlug","text","to","toLowerCase","replace","TagsForm","List","data","pageContext","page","useLocalJsonForm","ListForm","numPages","limit","skip","currentPage","isFirst","isLast","prevPage","nextPage","title","posts","edges","article","node","frontmatter","draft","path","excerpt","date","ListNav","rel","styled","div","filename","uploadDir","previewSrc","formValues","jsonNode","hero","image","childImageSharp","fluid","src"],"mappings":"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","file":"component---src-templates-list-js-fbc3d53ce6c93e2cb622.js","sourcesContent":["import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useTags = () => {\n  const { settingsJson } = useStaticQuery(\n    graphql`\n      query tagsQuery {\n        settingsJson(\n          fileRelativePath: { eq: \"/content/settings/tags.json\" }\n        ) {\n          ...tags\n        }\n      }\n    `\n  );\n\n  return settingsJson.tags;\n}\n\nexport const tagsFragment = graphql`\n  fragment tags on SettingsJson {\n    tags {\n      id\n      text\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useAuthors = () => {\n  const { settingsJson } = useStaticQuery(\n    graphql`\n      query authorsQuery {\n        settingsJson(\n          fileRelativePath: { eq: \"/content/settings/authors.json\" }\n        ) {\n          ...authors\n        }\n      }\n    `\n  )\n\n  return settingsJson.authors\n}\n\nexport const authorsFragment = graphql`\n  fragment authors on SettingsJson {\n    authors {\n      email\n      name\n      id\n      link\n    }\n  }\n`\n","import { useAuthors } from \"./useAuthors\"\n\nexport const ListAuthors = ({ authorIDs }) => {\n  const authors = useAuthors().filter(author =>\n    authorIDs.find(id => id === author.id)\n  )\n\n  const authorList = authors.map((author, index) => {\n    if (authors.length === index + 1) {\n      return author.name\n    } else {\n      return author.name + \", \"\n    }\n  })\n\n  return authorList\n}\n\nexport const AuthorsForm = {\n  label: \"Authors\",\n  fields: [\n    {\n      label: \"Authors\",\n      name: \"rawJson.authors\",\n      component: \"group-list\",\n      itemProps: item => ({\n        key: item.id,\n        label: item.name,\n      }),\n      defaultItem: () => ({\n        name: \"New Author\",\n        id: Math.random()\n          .toString(36)\n          .substr(2, 9),\n        email: \"\",\n        link: \"\",\n      }),\n      fields: [\n        {\n          label: \"Name\",\n          name: \"name\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n        {\n          label: \"Email\",\n          name: \"email\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n        {\n          label: \"Link\",\n          name: \"link\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n      ],\n    },\n  ],\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { useTags } from \"./useTags\"\n\nexport const ListTags = ({ tagIDs }) => {\n  const tags = useTags().filter(tag =>\n    tagIDs.find(id => id === tag.id)\n  )\n\n  const tagList = tags.map((tag, index) => {\n    const slug = ConvertTagTextToSlug(tag.text);\n    if (tags.length === index + 1) {\n      return <><Link to={`/blog/tag/${slug}`}>{tag.text}</Link></>\n    } else {\n      return <><Link to={`/blog/tag/${slug}`}>{tag.text}</Link>, </>\n    }\n  })\n\n  return tagList\n}\n\nexport const ConvertTagTextToSlug = (text) => {\n  return text.toLowerCase().replace(\" \", \"-\"); // TODO: Need more complex conversion from tag text to a URI slug.\n}\n\nexport const TagsForm = {\n  label: \"Tags\",\n  fields: [\n    {\n      label: \"Tags\",\n      name: \"rawJson.tags\",\n      component: \"group-list\",\n      itemProps: item => ({\n        key: item.id,\n        label: item.text,\n      }),\n      defaultItem: () => ({\n        name: \"New Tag\",\n        id: Math.random()\n          .toString(36)\n          .substr(2, 9),\n        text: \"\",\n      }),\n      fields: [\n        {\n          label: \"Text\",\n          name: \"text\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n      ],\n    },\n  ],\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport { useLocalJsonForm } from \"gatsby-tinacms-json\"\n\nimport {\n  Paper,\n  Meta,\n  MetaSpan,\n  MetaActions,\n  DraftBadge,\n} from \"../components/style\"\nimport { ListAuthors, AuthorsForm } from \"../components/authors\"\nimport { TagsForm } from \"../components/tags\"\nimport { Link } from \"gatsby\"\nimport { PageLayout } from \"../components/pageLayout\"\n\nexport default function List({ data, pageContext }) {\n  const [tags] = useLocalJsonForm(data.tags, TagsForm)\n  const [page] = useLocalJsonForm(data.page, ListForm)\n  const [authors] = useLocalJsonForm(data.authors, AuthorsForm)\n\n  const { slug, limit, skip, numPages, currentPage } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage =\n    currentPage - 1 === 1 ? slug : slug + \"/\" + (currentPage - 1).toString()\n  const nextPage = slug + \"/\" + (currentPage + 1).toString()\n  page.title = isFirst ? page.title : page.title + \" - \" + currentPage\n\n  return (\n    <PageLayout page={page}>\n      <>\n        {data.posts &&\n          data.posts.edges.map((item) => {\n            return (\n              <Paper article key={item.node.id}>\n                {item.node.frontmatter.draft && <DraftBadge>Draft</DraftBadge>}\n                <h2>\n                  <Link to={item.node.frontmatter.path}>\n                    {item.node.frontmatter.title}\n                  </Link>\n                </h2>\n                <p>{item.node.excerpt}</p>\n                <Meta>\n                  <MetaSpan>{item.node.frontmatter.date}</MetaSpan>\n                  {item.node.frontmatter.authors && (\n                    <MetaSpan>\n                      <em>By</em>&nbsp;\n                      <ListAuthors authorIDs={item.node.frontmatter.authors} />\n                    </MetaSpan>\n                  )}\n                  <MetaActions>\n                    <Link to={item.node.frontmatter.path}>Read Article →</Link>\n                  </MetaActions>\n                </Meta>\n              </Paper>\n            )\n          })}\n        <ListNav>\n          {!isFirst && (\n            <Link to={prevPage} rel=\"prev\">\n              ← Newer\n            </Link>\n          )}\n          {!isLast && (\n            <Link to={nextPage} rel=\"next\">\n              Older →\n            </Link>\n          )}\n        </ListNav>\n      </>\n    </PageLayout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($listType: String!, $slug: String!, $skip: Int!, $limit: Int!) {\n    page: pagesJson(path: { eq: $slug }) {\n      path\n      title\n      hero {\n        headline\n        textline\n        large\n        overlay\n        ctas {\n          label\n          link\n          primary\n          arrow\n        }\n        image {\n          childImageSharp {\n            fluid(quality: 70, maxWidth: 1920) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n      listType\n      rawJson\n      fileRelativePath\n    }\n    posts: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        frontmatter: { type: { eq: $listType } }\n        published: { eq: true }\n      }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n            draft\n            authors\n            tags\n          }\n        }\n      }\n    }\n    authors: settingsJson(\n      fileRelativePath: { eq: \"/content/settings/authors.json\" }\n    ) {\n      ...authors\n\n      rawJson\n      fileRelativePath\n    }\n    tags: settingsJson(\n      fileRelativePath: { eq: \"/content/settings/tags.json\" }\n    ) {\n      ...tags\n\n      rawJson\n      fileRelativePath\n    }\n  }\n`\n\nexport const ListNav = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n\n  a {\n    display: inline-block;\n    padding: 0.5rem 1rem;\n  }\n`\n\nconst ListForm = {\n  label: \"Page\",\n  fields: [\n    {\n      label: \"Title\",\n      name: \"rawJson.title\",\n      component: \"text\",\n    },\n    {\n      label: \"Hero\",\n      name: \"rawJson.hero\",\n      component: \"group\",\n      fields: [\n        {\n          label: \"Headline\",\n          name: \"headline\",\n          component: \"text\",\n        },\n        {\n          label: \"Textline\",\n          name: \"textline\",\n          component: \"text\",\n        },\n        {\n          label: \"Image\",\n          name: \"image\",\n          component: \"image\",\n          parse: (filename) => `../images/${filename}`,\n          uploadDir: () => `/content/images/`,\n          previewSrc: (formValues) => {\n            if (!formValues.jsonNode.hero || !formValues.jsonNode.hero.image)\n              return \"\"\n            return formValues.jsonNode.hero.image.childImageSharp.fluid.src\n          },\n        },\n        {\n          label: \"Actions\",\n          name: \"ctas\",\n          component: \"group-list\",\n          itemProps: (item) => ({\n            key: item.link,\n            label: item.label,\n          }),\n          fields: [\n            {\n              label: \"Label\",\n              name: \"label\",\n              component: \"text\",\n            },\n            {\n              label: \"Link\",\n              name: \"link\",\n              component: \"text\",\n            },\n            {\n              label: \"Primary\",\n              name: \"primary\",\n              component: \"toggle\",\n            },\n            {\n              label: \"Arrow\",\n              name: \"arrow\",\n              component: \"toggle\",\n            },\n          ],\n        },\n        {\n          label: \"Large\",\n          name: \"large\",\n          component: \"toggle\",\n        },\n      ],\n    },\n  ],\n}\n"],"sourceRoot":""}