{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./src/components/useTags.js","webpack:///./src/components/useAuthors.js","webpack:///./src/components/authors.js","webpack:///./src/components/tags.js"],"names":["Post","props","authors","useAuthors","tags","useTags","page","data","markdownRemark","formOptions","actions","DeleteAction","fields","label","name","component","parse","media","filename","uploadDir","previewSrc","src","path","formValues","frontmatter","hero","image","childImageSharp","fluid","useRemarkForm","form","usePlugin","date","length","authorIDs","to","format","dangerouslySetInnerHTML","__html","html","draft","process","tagIDs","useStaticQuery","settingsJson","ListAuthors","filter","author","find","id","map","index","AuthorsForm","itemProps","item","key","defaultItem","Math","random","toString","substr","email","link","value","ListTags","tag","slug","ConvertTagTextToSlug","text","toLowerCase","replace","TagsForm"],"mappings":"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","file":"component---src-templates-post-js-de8ba18444e4ef7bd4f3.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\n\nimport { usePlugin } from \"tinacms\"\nimport { useRemarkForm, DeleteAction } from \"gatsby-tinacms-remark\"\nimport { InlineForm, InlineTextField } from \"react-tinacms-inline\"\nimport { InlineWysiwyg } from \"react-tinacms-editor\"\n\nimport {\n  Paper,\n  Meta,\n  MetaSpan,\n  MetaActions,\n  DraftBadge,\n} from \"../components/style\"\nimport { EditToggle } from \"../components/editToggle\"\nimport { ListAuthors } from \"../components/authors\"\nimport { ListTags } from \"../components/tags\"\nimport { PageLayout } from \"../components/pageLayout\"\nimport { useAuthors } from \"../components/useAuthors\"\nimport { useTags } from \"../components/useTags\"\n\nfunction Post(props) {\n  const authors = useAuthors()\n  const tags = useTags()\n  const page = props.data.markdownRemark\n\n  const formOptions = {\n    actions: [DeleteAction],\n    fields: [\n      {\n        label: \"Title\",\n        name: \"rawFrontmatter.title\",\n        component: \"text\",\n      },\n      {\n        label: \"Authors\",\n        name: \"rawFrontmatter.authors\",\n        component: \"authors\",\n        authors: authors,\n      },\n      {\n        name: \"rawFrontmatter.draft\",\n        component: \"toggle\",\n        label: \"Draft\",\n      },\n      {\n        label: \"Date\",\n        name: \"rawFrontmatter.date\",\n        component: \"date\",\n      },\n      {\n        label: \"Hero Image\",\n        name: \"rawFrontmatter.hero.image\",\n        component: \"image\",\n        parse: (media) => {\n          if (!media) return \"\"\n          return `../images/${media.filename}`\n        },\n        uploadDir: () => `/content/images/`,\n        previewSrc: (src, path, formValues) => {\n          if (\n            !formValues.frontmatter.hero ||\n            !formValues.frontmatter.hero.image\n          )\n            return \"\"\n          return formValues.frontmatter.hero.image.childImageSharp.fluid.src\n        },\n      },\n      {\n        label: \"Tags\",\n        name: \"rawFrontmatter.tags\",\n        component: \"tags\",\n        tags: tags,\n      },\n    ],\n  }\n\n  const [data, form] = useRemarkForm(page, formOptions)\n  usePlugin(form)\n\n  return (\n    <InlineForm form={form}>\n      <PageLayout page={data}>\n        <Paper>\n          <Meta>\n            <MetaSpan>{data.frontmatter.date}</MetaSpan>\n            {data.frontmatter.authors && data.frontmatter.authors.length > 0 && (\n              <MetaSpan>\n                <em>By</em>&nbsp;\n                <ListAuthors authorIDs={data.frontmatter.authors} />\n              </MetaSpan>\n            )}\n            <MetaActions>\n              <Link to=\"/blog\">‚Üê Back to Blog</Link>\n            </MetaActions>\n          </Meta>\n          <h1>\n            <InlineTextField name=\"rawFrontmatter.title\" />\n          </h1>\n          <hr />\n          <InlineWysiwyg name=\"rawMarkdownBody\" format=\"markdown\">\n            <div\n              dangerouslySetInnerHTML={{\n                __html: data.html,\n              }}\n            />\n          </InlineWysiwyg>\n          {data.frontmatter.draft && <DraftBadge>Draft</DraftBadge>}\n          {process.env.NODE_ENV !== \"production\" && <EditToggle />}\n        </Paper>\n        {data.frontmatter.tags && data.frontmatter.tags.length > 0 && (\n          <Meta>\n            <MetaSpan>\n              <ListTags tagIDs={data.frontmatter.tags} />\n            </MetaSpan>\n          </Meta>\n        )}\n      </PageLayout>\n    </InlineForm>\n  )\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n  query($path: String!) {\n    markdownRemark(\n      published: { eq: true }\n      frontmatter: { path: { eq: $path } }\n    ) {\n      id\n      excerpt(pruneLength: 160)\n      html\n\n      frontmatter {\n        path\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        draft\n        authors\n        hero {\n          large\n          overlay\n          image {\n            childImageSharp {\n              fluid(quality: 70, maxWidth: 1920) {\n                ...GatsbyImageSharpFluid_withWebp\n              }\n            }\n          }\n        }\n        tags\n      }\n\n      fileRelativePath\n      rawFrontmatter\n      rawMarkdownBody\n    }\n    authors: settingsJson(fileRelativePath: { eq: \"/content/settings/authors.json\" }) {\n      ...authors\n    }\n    tags: settingsJson(fileRelativePath: { eq: \"/content/settings/tags.json\" }) {\n      ...tags\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useTags = () => {\n  const { settingsJson } = useStaticQuery(\n    graphql`\n      query tagsQuery {\n        settingsJson(\n          fileRelativePath: { eq: \"/content/settings/tags.json\" }\n        ) {\n          ...tags\n        }\n      }\n    `\n  );\n\n  return settingsJson.tags;\n}\n\nexport const tagsFragment = graphql`\n  fragment tags on SettingsJson {\n    tags {\n      id\n      text\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useAuthors = () => {\n  const { settingsJson } = useStaticQuery(\n    graphql`\n      query authorsQuery {\n        settingsJson(\n          fileRelativePath: { eq: \"/content/settings/authors.json\" }\n        ) {\n          ...authors\n        }\n      }\n    `\n  )\n\n  return settingsJson.authors\n}\n\nexport const authorsFragment = graphql`\n  fragment authors on SettingsJson {\n    authors {\n      email\n      name\n      id\n      link\n    }\n  }\n`\n","import { useAuthors } from \"./useAuthors\"\n\nexport const ListAuthors = ({ authorIDs }) => {\n  const authors = useAuthors().filter(author =>\n    authorIDs.find(id => id === author.id)\n  )\n\n  const authorList = authors.map((author, index) => {\n    if (authors.length === index + 1) {\n      return author.name\n    } else {\n      return author.name + \", \"\n    }\n  })\n\n  return authorList\n}\n\nexport const AuthorsForm = {\n  label: \"Authors\",\n  fields: [\n    {\n      label: \"Authors\",\n      name: \"rawJson.authors\",\n      component: \"group-list\",\n      itemProps: item => ({\n        key: item.id,\n        label: item.name,\n      }),\n      defaultItem: () => ({\n        name: \"New Author\",\n        id: Math.random()\n          .toString(36)\n          .substr(2, 9),\n        email: \"\",\n        link: \"\",\n      }),\n      fields: [\n        {\n          label: \"Name\",\n          name: \"name\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n        {\n          label: \"Email\",\n          name: \"email\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n        {\n          label: \"Link\",\n          name: \"link\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n      ],\n    },\n  ],\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { useTags } from \"./useTags\"\n\nexport const ListTags = ({ tagIDs }) => {\n  const tags = useTags().filter(tag =>\n    tagIDs.find(id => id === tag.id)\n  )\n\n  const tagList = tags.map((tag, index) => {\n    const slug = ConvertTagTextToSlug(tag.text);\n    if (tags.length === index + 1) {\n      return <><Link to={`/blog/tag/${slug}`}>{tag.text}</Link></>\n    } else {\n      return <><Link to={`/blog/tag/${slug}`}>{tag.text}</Link>, </>\n    }\n  })\n\n  return tagList\n}\n\nexport const ConvertTagTextToSlug = (text) => {\n  return text.toLowerCase().replace(\" \", \"-\"); // TODO: Need more complex conversion from tag text to a URI slug.\n}\n\nexport const TagsForm = {\n  label: \"Tags\",\n  fields: [\n    {\n      label: \"Tags\",\n      name: \"rawJson.tags\",\n      component: \"group-list\",\n      itemProps: item => ({\n        key: item.id,\n        label: item.text,\n      }),\n      defaultItem: () => ({\n        name: \"New Tag\",\n        id: Math.random()\n          .toString(36)\n          .substr(2, 9),\n        text: \"\",\n      }),\n      fields: [\n        {\n          label: \"Text\",\n          name: \"text\",\n          component: \"text\",\n          parse(value) {\n            return value || \"\"\n          },\n        },\n      ],\n    },\n  ],\n}\n"],"sourceRoot":""}